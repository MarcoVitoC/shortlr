// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const generateShortlr = `-- name: GenerateShortlr :one
INSERT INTO shortlrs (
    id, long_url, short_url, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, long_url, short_url, access_count, created_at, updated_at
`

type GenerateShortlrParams struct {
	ID        pgtype.UUID
	LongUrl   string
	ShortUrl  string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GenerateShortlr(ctx context.Context, arg GenerateShortlrParams) (Shortlr, error) {
	row := q.db.QueryRow(ctx, generateShortlr,
		arg.ID,
		arg.LongUrl,
		arg.ShortUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Shortlr
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.ShortUrl,
		&i.AccessCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllShortlr = `-- name: GetAllShortlr :many
SELECT id, long_url, short_url, access_count, created_at, updated_at FROM shortlrs
`

func (q *Queries) GetAllShortlr(ctx context.Context) ([]Shortlr, error) {
	rows, err := q.db.Query(ctx, getAllShortlr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shortlr
	for rows.Next() {
		var i Shortlr
		if err := rows.Scan(
			&i.ID,
			&i.LongUrl,
			&i.ShortUrl,
			&i.AccessCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByLongUrl = `-- name: GetByLongUrl :one
SELECT id, long_url, short_url, access_count, created_at, updated_at FROM shortlrs
WHERE long_url = $1
`

func (q *Queries) GetByLongUrl(ctx context.Context, longUrl string) (Shortlr, error) {
	row := q.db.QueryRow(ctx, getByLongUrl, longUrl)
	var i Shortlr
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.ShortUrl,
		&i.AccessCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
